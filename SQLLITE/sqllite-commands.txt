C:\Users\seyade02>sqlite3 test.db

SQLite version 3.38.5 2022-05-06 15:25:27

Enter ".help" for usage hints.

sqlite> .headers on

sqlite> create table contacts (name text, phone integer, email text);

sqlite> insert into contacts (name, phone, email) values('Tim', 6545678, 'tim@email.com');

sqlite> insert into contacts values('Seyi', 5235678, 'seyi@email.com');

Tim|6545678|tim@email.com

Seyi|5235678|seyi@email.com

sqlite> select name from contacts where email == 'seyi@mail.com';

sqlite> insert into contacts values('Dan', '+61 (0)5235678', 'dan@email.com');

sqlite> .backup testbackup

sqlite> UPDATE contacts SET email="steve@email.com";

sqlite> .restore testbackup

sqlite> UPDATE contacts SET email="seyi@hisemail.com" WHERE name = 'Seyi' ;

sqlite> DELETE from contacts WHERE name='Dan';

sqlite> select * from contacts;

name|phone|email

Tim|6545678|tim@email.com

Seyi|5235678|seyi@hisemail.com

sqlite> .tables

contacts

sqlite> .schema

CREATE TABLE contacts (name text, phone integer, email text);

sqlite> .dump

sqlite>.exit

SELECT * FROM albums ORDER BY name COLLATE NOCASE;

sqlite> SELECT * FROM albums ORDER BY artist, name COLLATE NOCASE;

sqlite> .schema
CREATE TABLE songs (_id INTEGER PRIMARY KEY, track INTEGER, title TEXT NOT NULL, album INTEGER);
CREATE TABLE albums (_id INTEGER PRIMARY KEY, name TEXT NOT NULL, artist INTEGER);
CREATE TABLE artists (_id INTEGER PRIMARY KEY, name TEXT NOT NULL);
sqlite> SELECT songs.track, songs.title, albums.name FROM songs JOIN albums ON songs.albums = albums._id;
# (same as above line) can also explicit INNER as some database enforces this to be specified
sqlite> SELECT songs.track, songs.title, albums.name FROM songs INNER JOIN albums ON songs.albums = albums._id;
# can also leave out the name of the tables if no ambiguity but not a good practice
sqlite> SELECT track, title, name FROM songs INNER JOIN albums ON songs.albums = albums._id;
sqlite> SELECT track, title, name FROM songs INNER JOIN albums ON songs.albums = albums._id ORDER BY albums.name, songs.title;
# reordering for much cleaner output return
sqlite> SELECT name, track, title FROM songs INNER JOIN albums ON songs.album = albums._id ORDER BY albums.name, songs.title;
sqlite> SELECT artists.name, albums.name FROM artists INNER JOIN albums ON albums.artist = artists._id ORDER BY artists.name;

# Complex Joins
sqlite> SELECT artists.name, albums.name, songs.track, songs.title FROM songs
   ...> INNER JOIN albums ON songs.album = albums._id
   ...> INNER JOIN artists ON albums.artist = artists._id
   ...> ORDER BY artists.name, albums.name, songs.track;

sqlite> SELECT artists.name, albums.name, songs.track, songs.title FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id WHERE albums.name = "Doolittle" ORDER BY artists.name, albums.name, songs.track;

Using wildcard
----------------
SELECT artists.name, albums.name, songs.track, songs.title FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id WHERE songs.title LIKE "%doctor%" ORDER BY artists.name, albums.name, songs.track;

Creating Views
-----------------
 CREATE VIEW artist_list AS SELECT artists.name, albums.name, songs.track, songs.title FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id ORDER BY artists.name, albums.name, songs.track;
 Select * from artist_list WHERE name LIKE "jefferson%"

 # (Better than above) [Explicitly adding AS artist and AS album] to avoid 'name' renaming due to name collision
 CREATE VIEW artist_list AS SELECT artists.name AS artist, albums.name AS album, songs.track, songs.title FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id ORDER BY artists.name, albums.name, songs.track;
 Select * from artist_list WHERE name LIKE "jefferson%"

 CREATE VIEW album_list AS select name from albums order by name collate nocase;

 Delete View
 -----------
 DROP VIEW album_list;

 select * from songs WHERE track <> 71;
 select count(*) from songs;
 .restore <dbname>

 Challenge
 -----------------
 1. sqlite> SELECT songs.title FROM songs INNER JOIN albums ON songs.album = albums._id WHERE albums.name = "Forbidden";
 2. SELECT songs.track, songs.title FROM songs INNER JOIN albums ON songs.album = albums._id WHERE albums.name = "Forbidden" ORDER BY songs.track;
 3. SELECT artists.name, songs.track, songs.title FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id WHERE artists.name = 'Deep Purple';
 4. UPDATE artists SET name='One Kitten' where artists.name='Mehitabel';
 5. SELECT * FROM artists WHERE artists.name = 'One Kitten';
 6. SELECT title FROM artist_list WHERE artist = 'Aerosmith' ORDER BY title;
 7. SELECT count(*) FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id WHERE artists.name = 'Aerosmith' ORDER BY artists.name;
 7. SELECT count(title) FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id WHERE artists.name = 'Aerosmith' ORDER BY artists.name;
 8. SELECT DISTINCT songs.title FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id WHERE artists.name = 'Aerosmith' ORDER BY artists.name;
 9. SELECT count(DISTINCT songs.title) FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id WHERE artists.name = 'Aerosmith' ORDER BY artists.name;
 10. SELECT count(DISTINCT artists.name), count(albums.name) FROM songs INNER JOIN albums ON songs.album = albums._id INNER JOIN artists ON albums.artist = artists._id WHERE artists.name = 'Aerosmith';